import { v4 as uuidv4 } from "uuid";
import axios from "axios";

/**
 * Calendars follow the following structure:
 * {
 *  name: "My calendar",
 *  carga: "An academic load",
 *  career: "A career",
 *  sections: [] // An array of sections
 * }
 */

const state = {
  localCalendars: [], // Starts empty, then gets populated with the calendars from the local storage
  apiCalendars: [],
  sectionsSidebar: false, // Used to toggle the sections sidebar in the calendar editor
  calendar: null,
};

const mutations = {
  setSectionsSidebar(state, value) {
    state.sectionsSidebar = value;
  },

  setLocalCalendars(state, calendars) {
    state.localCalendars = calendars;
  },

  setApiCalendars(state, calendars) {
    state.apiCalendars = calendars;
  },

  setCalendar(state, calendar) {
    state.calendar = calendar;
  },

  addCalendar(state, calendar) {
    state.localCalendars.push(calendar);
  },

  removeLocalCalendar(state, calendar) {
    state.localCalendars = state.localCalendars.filter(
      (c) => c.uid !== calendar.uid
    );
  },

  updateCalendar(state, calendar) {
    const index = state.localCalendars.findIndex((c) => c.id === calendar.id);
    state.localCalendars.splice(index, 1, calendar);
  },

  addSection(state, section) {
    state.selectedCalendar.sections.push(section);
  },
};

const actions = {
  /**
   * This function is used to add a uuid to the calendars
   * generated by previous versions of Duocmatico, which
   * didn't have a uuid.
   */
  async addUuidToCalendars({ state, dispatch }) {
    const calendars = state.localCalendars.map((calendar) => {
      return calendar.uuid ? calendar : { uuid: uuidv4(), ...calendar };
    });
    dispatch("setLocalCalendars", calendars);
  },

  async getLocalCalendars({ commit }) {
    const calendars = JSON.parse(localStorage.getItem("calendars")) ?? [];
    commit("setLocalCalendars", calendars);
  },

  // This is used over and over again, so it's better to have it as a function
  async saveLocalCalendars({ state }) {
    localStorage.setItem("calendars", JSON.stringify(state.localCalendars));
  },

  async setLocalCalendars({ commit, dispatch }, calendars) {
    commit("setLocalCalendars", calendars);
    dispatch("saveLocalCalendars");
  },

  async toggleSectionsSidebar({ commit, state }) {
    commit("setSectionsSidebar", !state.sectionsSidebar);
  },

  // There are cases when the sections sidebar needs to be closed by default
  async setSectionsSidebar({ commit }, value) {
    commit("setSectionsSidebar", value);
  },

  async addCalendar({ commit, dispatch }, calendar) {
    // adds uuid to calendar
    commit("addCalendar", { uuid: uuidv4(), ...calendar });
    dispatch("saveLocalCalendars");
  },

  /**
   * Used to get the current user calendars from the API
   */
  async getApiCalendars({ rootState, commit }) {
    try {
      const { token } = rootState.auth;
      const response = await axios.get(`${rootState.apiUrl}/calendars`, {
        headers: {
          Authorization: `Bearer ` + token,
        },
      });
      commit("setApiCalendars", response.data);
      return response.data;
    } catch (error) {
      return null;
    }
  },

  /**
   * This function is a general way to delete calendars. It first
   * check if the calendar is inside the local calendars.
   * We always check inside the API because the user could have
   * deleted the calendar from the API.
   */
  async deleteCalendar({ commit, dispatch, rootState }, calendar) {
    // Remove it from local calendars does not affect if it's on API
    commit("removeLocalCalendar", calendar);
    dispatch("saveLocalCalendars");

    try {
      // Delete if from the api
      const { token } = rootState.auth;
      await axios.delete(`${state.apiUrl}/calendars/${calendar.uid}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
    } catch (error) {
      // If there is an error, the calendar does not exists on API
      // or it's not owned by the user, so we can safely ignore it
    }
  },

  async updateCalendar({ commit, dispatch }, calendar) {
    commit("updateCalendar", calendar);
    dispatch("saveLocalCalendars");
  },

  async getLocalCalendarByUuid({ state, commit }, uuid) {
    const calendar = state.localCalendars.find((c) => c.uuid === uuid);
    commit("setCalendar", calendar);
  },

  /**
   * Fetch a calendar from the API by its uuid
   * If the calendar is not found, it returns null
   */
  async getApiCalendarByUuid({ state, commit, rootState }, uuid) {
    try {
      const { token } = rootState.auth;
      const response = await axios.get(`${state.apiUrl}/calendars/${uuid}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      commit("setCalendar", response.data);
      return response.data;
    } catch (error) {
      return null;
    }
  },

  async selectCalendarByIndex({ state, commit, dispatch, rootState }, index) {
    const calendar = state.localCalendars[index];
    commit("setSelectedCalendar", calendar);
    // check if sections needs to be cleaned
    const { carga, carrera } = calendar;
    const academicChargeState = rootState.academicCharges;
    const fetchSections =
      carga != academicChargeState.carga ||
      carrera != academicChargeState.carrera;

    commit("academicCharges/setCarga", calendar.carga, { root: true });
    commit("academicCharges/setCarrera", calendar.carrera, { root: true });
    if (fetchSections) {
      await dispatch("academicCharges/getSectionsFromFirebase", null, {
        root: true,
      });
    }
  },

  /**
   * The following set of actions are used only to
   * add or remove sections in the calendar editor.
   * They are not used anywhere else.
   */

  async addSection({ state, dispatch, commit }, section) {
    const calendar = state.selectedCalendar;
    commit("addSection", section);
    dispatch("updateCalendar", calendar);
  },

  async removeSection({ state, dispatch }, section) {
    const calendar = state.selectedCalendar;
    calendar.sections = calendar.sections.filter(
      (s) => s.seccion !== section.seccion
    );
    dispatch("updateCalendar", calendar);
  },
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
};
